node {
    // --- Global Tools ---
    def mvnHome = tool name: 'maven', type: 'maven'
    def scannerHome = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'
    // --- Environment Variables ---
    env.NEXUS_VERSION = "nexus3"
    env.NEXUS_PROTOCOL = "http"
    env.NEXUS_URL = "54.175.175.94:8081"
    env.NEXUS_REPOSITORY = "rachana-snapshot"
    env.NEXUS_CREDENTIAL_ID = "nexus"
    stage("Clone Code") {
        git 'https://github.com/RekhaTakkalapally/hiring-app.git'
    }
    stage("Maven Build") {
        sh "${mvnHome}/bin/mvn -Dmaven.test.failure.ignore=true clean install"
    }
    stage("SonarQube Analysis") {
        withSonarQubeEnv('sonar-server') {
            sh """
                ${scannerHome}/bin/sonar-scanner \
                  -Dsonar.projectKey=Ncodeit \
                  -Dsonar.projectName=Ncodeit \
                  -Dsonar.projectVersion=2.0 \
                  -Dsonar.sources=${WORKSPACE}/src/ \
                  -Dsonar.binaries=target/classes/com/visualpathit/account/controller/ \
                  -Dsonar.junit.reportsPath=target/surefire-reports \
                  -Dsonar.jacoco.reportPath=target/jacoco.exec \
                  -Dsonar.java.binaries=src/com/room/sample
            """
        }
    }
    stage("Publish to Nexus") {
        script {
            def pom = readMavenPom file: "pom.xml"
            def filesByGlob = findFiles(glob: "target/*.${pom.packaging}")
            echo "Artifact: ${filesByGlob[0].name} at ${filesByGlob[0].path}"
            def artifactPath = filesByGlob[0].path
            def artifactExists = fileExists artifactPath
            if (artifactExists) {
                nexusArtifactUploader(
                    nexusVersion: env.NEXUS_VERSION,
                    protocol: env.NEXUS_PROTOCOL,
                    nexusUrl: env.NEXUS_URL,
                    groupId: pom.groupId,
                    version: pom.version,
                    repository: env.NEXUS_REPOSITORY,
                    credentialsId: env.NEXUS_CREDENTIAL_ID,
                    artifacts: [
                        [artifactId: pom.artifactId, classifier: '', file: artifactPath, type: pom.packaging],
                        [artifactId: pom.artifactId, classifier: '', file: "pom.xml", type: "pom"]
                    ]
                )
            } else {
                error "*** File: ${artifactPath}, could not be found"
            }
        }
    }
